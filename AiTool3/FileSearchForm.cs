using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AiTool3
{
    public class FileSearchForm : Form
    {
        private TreeView treeView;
        private Panel buttonPanel;
        private Button testButton;
        private Button addFilesToInputButton;
        private string rootPath;
        private string[] fileExtensions;
        public EventHandler<List<string>> AddFilesToInput;

        public FileSearchForm(string path, string csvFileTypes)
        {
            rootPath = path;
            fileExtensions = csvFileTypes.Split(',').Select(ext => ext.Trim().ToLower()).ToArray();

            InitializeComponent();
            PopulateTreeView(@"## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

*.7z
*.csv

Sentinel/PhysicalDeletes/*
Sentinel/Content/Images/SHEFFIELD*.png
Sentinel/Properties/AssemblyInfo.cs
SentinelAPI/Properties/AssemblyInfo.cs
SentinelDatabase/Properties/AssemblyInfo.cs
Sentinel/commitref.txt
Sentinel/revcount.txt
Sentinel/uncommitted.txt
Sentinel/Configs/database.config
Sentinel/Configs/*

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# JetBrains Rider
.idea/
*.sln.iml

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/
#/.nuget/NuGet.exe

# Temporary method of excluding typescript autogenerated js & js.map files
*.js.map
/Sentinel/Scripts/Sentinel/Maintenance/FormRendererController2.js
/Sentinel/Scripts/Sentinel/Security/BulkAuthAdminController.js
/Sentinel/Scripts/Sentinel/Security/GroupBulkAuthAdminController.js
/Sentinel/Scripts/Sentinel/Security/RoleBulkAuthAdminController.js

/Sentinel/Scripts/Sentinel/Maintenance/FormRendererChangeTrackerController.js
Sentinel/Configs/database.config
/Sentinel/Scripts/Sentinel/DataExport/DataExportController.js
/Sentinel/Scripts/Sentinel/Maintenance/ArrayIntersect.js
/Sentinel/Scripts/Sentinel/Maintenance/BasicModuleStructure.js
/Sentinel/Scripts/Sentinel/Maintenance/FormRendererModel.js
/Sentinel/Scripts/Sentinel/Maintenance/FormRendererViewModel.js
/Sentinel/Scripts/Sentinel/Maintenance/ForumController.js
/Sentinel/Scripts/Sentinel/Maintenance/HomeViewModel.js
/Sentinel/Scripts/Sentinel/Maintenance/HomeViewModel2.js
/Sentinel/Scripts/Sentinel/Maintenance/INProcessor.js
/Sentinel/Scripts/Sentinel/Maintenance/JSLoggingTool.js
/Sentinel/Scripts/Sentinel/Maintenance/ModuleSettingsController.js
/Sentinel/Scripts/Sentinel/Maintenance/OutOfOfficeController.js
/Sentinel/Scripts/Sentinel/Maintenance/ReminderController.js
/Sentinel/Scripts/Sentinel/Maintenance/ReportParametersController.js
/Sentinel/Scripts/Sentinel/Maintenance/UndeleteFormsController.js
/Sentinel/Scripts/Sentinel/Maintenance/VisTestController.js
/Sentinel/Scripts/Sentinel/Maintenance/VisTestModel.js
/Sentinel/Scripts/Sentinel/Scheduling/SchedulingController.js
/Sentinel/Scripts/Vue/FormStructureControl.js
/Sentinel/Scripts/Vue/RenderOptions.js
/Sentinel/Scripts/Vue/controls.js
/Sentinel/Scripts/Vue/controls3.js
Sentinel/Configs/database.config
/api.json
/AiTool3/OpenAIEmbedFragged2.embeddings.json
/AiTool3/OpenAIEmbedFragged2.embeddings.json.bin
/AiTool3/OpenAIEmbedFragged2.embeddings.zip
/AiTool3/OllamaEmbeddings.embeddings.json
/commit.ps1");
        }

        private void InitializeComponent()
        {
            this.treeView = new TreeView();
            this.buttonPanel = new Panel();
            this.testButton = new Button();
            this.addFilesToInputButton = new Button();
            this.SuspendLayout();

            // TreeView
            this.treeView.Dock = DockStyle.Fill;
            this.treeView.CheckBoxes = true;
            this.treeView.AfterCheck += new TreeViewEventHandler(treeView_AfterCheck);
            this.treeView.ItemDrag += new ItemDragEventHandler(treeView_ItemDrag);
            this.treeView.AllowDrop = true;

            // Button Panel
            this.buttonPanel.Dock = DockStyle.Bottom;
            this.buttonPanel.Height = 40;

            // Test Button
            this.testButton.Text = "Test";
            this.testButton.Location = new Point(10, 5);
            this.testButton.Size = new Size(75, 30);
            this.testButton.Click += new EventHandler(testButton_Click);

            // Add Test Button to Button Panel
            this.buttonPanel.Controls.Add(this.testButton);

            // add files to input button

            this.addFilesToInputButton.Text = "Add Files to Input";
            this.addFilesToInputButton.Location = new Point(100, 5);
            this.addFilesToInputButton.Size = new Size(150, 30);
            this.addFilesToInputButton.Click += (sender, e) => AddFilesToInput?.Invoke(this, GetCheckedFiles());

            this.buttonPanel.Controls.Add(this.addFilesToInputButton);
            

            // Form
            this.ClientSize = new System.Drawing.Size(800, 600);
            this.Controls.Add(this.buttonPanel);
            this.Controls.Add(this.treeView);
            this.Name = "FileExplorerForm";
            this.Text = "File Explorer";
            this.ResumeLayout(false);
        }

        private void testButton_Click(object sender, EventArgs e)
        {
            var files = GetCheckedFiles();

            var cSharpAnalyzer = new CSharpAnalyzer();
            var methodInfos = cSharpAnalyzer.AnalyzeFiles(files);
            // remove all System methods
            methodInfos.RemoveAll(m => m.Namespace.StartsWith("System"));
            foreach(var m in methodInfos)
                m.RelatedMethodsFullName = m.RelatedMethodsFullName.Where(m => !m.StartsWith("System")).ToList();

            var mermaidDiagram = cSharpAnalyzer.GenerateMermaidDiagram(methodInfos);
            
            var interestingMethods = methodInfos.OrderByDescending(m => m.RelatedMethodsFullName.Count).ToList();

            MessageBox.Show($"Files checked: {string.Join(", ", files)}");
        }

        private void treeView_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (e.Item is TreeNode node)
            {
                string fullPath = GetFullPath(node);
                if (File.Exists(fullPath))
                {
                    DataObject data = new DataObject(DataFormats.Text, fullPath);
                    DoDragDrop(data, DragDropEffects.Copy);
                }
            }
        }

        private void PopulateTreeView(string gitignoreContent = null)
        {
            treeView.Nodes.Clear();
            TreeNode rootNode = new TreeNode(rootPath);
            var ignoreList = ParseGitignore(gitignoreContent);
            if (PopulateTreeNode(rootNode, rootPath, ignoreList))
            {
                treeView.Nodes.Add(rootNode);
            }
            treeView.ExpandAll();
        }

        private bool PopulateTreeNode(TreeNode node, string path, List<string> ignoreList)
        {
            bool hasValidChildren = false;

            string[] subdirectories = Directory.GetDirectories(path);
            foreach (string subdirectory in subdirectories)
            {
                string relativePath = GetRelativePath(rootPath, subdirectory);
                if (!ShouldIgnore(relativePath, ignoreList))
                {
                    TreeNode subNode = new TreeNode(Path.GetFileName(subdirectory));
                    if (PopulateTreeNode(subNode, subdirectory, ignoreList))
                    {
                        node.Nodes.Add(subNode);
                        hasValidChildren = true;
                    }
                }
                else Debug.WriteLine(subdirectory);
            }

            string[] files = Directory.GetFiles(path);
            foreach (string file in files)
            {
                string relativePath = GetRelativePath(rootPath, file);
                if (!ShouldIgnore(relativePath, ignoreList))
                {
                    string extension = Path.GetExtension(file).ToLower();
                    if (fileExtensions.Contains(extension))
                    {
                        TreeNode fileNode = new TreeNode(Path.GetFileName(file));
                        node.Nodes.Add(fileNode);
                        hasValidChildren = true;
                    }
                }
                else Debug.WriteLine(file);
            }

            return hasValidChildren;
        }

        private List<string> ParseGitignore(string gitignoreContent)
        {
            if (string.IsNullOrEmpty(gitignoreContent))
                return new List<string>();

            return gitignoreContent.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                .Where(line => !line.StartsWith("#") && !string.IsNullOrWhiteSpace(line))
                .Select(line => line.Trim())
                .ToList();
        }

        private bool ShouldIgnore(string path, List<string> ignoreList)
        {
            return ignoreList.Any(ignore =>
                path.StartsWith(ignore, StringComparison.OrdinalIgnoreCase) ||
                Regex.IsMatch(path, WildcardToRegex(ignore), RegexOptions.IgnoreCase));
        }

        private string WildcardToRegex(string pattern)
        {
            return "^" + Regex.Escape(pattern)
                       .Replace("\\*", ".*")
                       .Replace("\\?", ".") + "$";
        }

        private string GetRelativePath(string rootPath, string fullPath)
        {
            return fullPath.Substring(rootPath.Length).TrimStart(Path.DirectorySeparatorChar);
        }

        private void treeView_AfterCheck(object sender, TreeViewEventArgs e)
        {
            treeView.AfterCheck -= treeView_AfterCheck;
            CheckAllChildNodes(e.Node, e.Node.Checked);
            CheckParentNodes(e.Node, e.Node.Checked);
            treeView.AfterCheck += treeView_AfterCheck;
        }

        private void CheckAllChildNodes(TreeNode treeNode, bool nodeChecked)
        {
            foreach (TreeNode node in treeNode.Nodes)
            {
                node.Checked = nodeChecked;
                if (node.Nodes.Count > 0)
                {
                    CheckAllChildNodes(node, nodeChecked);
                }
            }
        }

        private void CheckParentNodes(TreeNode treeNode, bool nodeChecked)
        {
            var parent = treeNode.Parent;
            if (parent != null)
            {
                if (!nodeChecked && parent.Checked)
                {
                    parent.Checked = false;
                }
                else if (nodeChecked && !parent.Checked && AllSiblingsChecked(treeNode))
                {
                    parent.Checked = true;
                }
                CheckParentNodes(parent, parent.Checked);
            }
        }

        private bool AllSiblingsChecked(TreeNode node)
        {
            return node.Parent.Nodes.Cast<TreeNode>().All(n => n.Checked);
        }

        public List<string> GetCheckedFiles()
        {
            List<string> checkedFiles = new List<string>();
            GetCheckedNodes(treeView.Nodes, checkedFiles);
            return checkedFiles;
        }

        private void GetCheckedNodes(TreeNodeCollection nodes, List<string> checkedFiles)
        {
            foreach (TreeNode node in nodes)
            {
                if (node.Checked && node.Nodes.Count == 0) // Only add leaf nodes (files)
                {
                    checkedFiles.Add(Path.Combine(GetFullPath(node)));
                }
                GetCheckedNodes(node.Nodes, checkedFiles);
            }
        }

        private string GetFullPath(TreeNode node)
        {
            List<string> pathParts = new List<string>();
            while (node != null)
            {
                pathParts.Add(node.Text);
                node = node.Parent;
            }
            pathParts.Reverse();
            return Path.Combine(pathParts.ToArray());
        }

        /* private string GetFullPath(TreeNode node)
   {
       List<string> pathParts = new List<string>();
       while (node != null)
       {
           pathParts.Add(node.Text);
           node = node.Parent;
       }
       pathParts.Reverse();
       return Path.Combine(rootPath, Path.Combine(pathParts.ToArray()));
   } */
    }
}